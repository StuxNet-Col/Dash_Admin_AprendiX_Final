{"ast":null,"code":"const fetchApi = 'https://nodebackend-vv0e.onrender.com/api/v1/';\nconst token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NTRiMjMyZDRmOGMxODgxMGU3OTMyOCIsImlhdCI6MTcxODE2MTQzMSwiZXhwIjoxNzE4MjQ3ODMxfQ.7--dVUCUDbRNTJ9PmQm45HEDRuXBDcBQy0mNqeSxI0c';\nconst fetchApiWithAuth = async (url, options) => {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-token': token,\n      ...options.headers\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Error en la solicitud a la API');\n  }\n  return response.json();\n};\nexport const registerCourse = async courseData => {\n  return fetchApiWithAuth(`${fetchApi}courses/registerCourse`, {\n    method: 'POST',\n    body: JSON.stringify(courseData)\n  });\n};\nexport const login = async (email, password) => {\n  const response = await fetch(`${fetchApi}auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Error en la solicitud de inicio de sesión');\n  }\n  return response.json();\n};\nexport const register = async userData => {\n  const response = await fetch(`${fetchApi}auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Error en la solicitud de registro');\n  }\n  return response.json();\n};\nexport const fetchTests = async () => {\n  const response = await fetch(`${fetchApi}test`, {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Error al obtener los tests');\n  }\n  return response.json();\n};\nexport const fetchTestById = async testId => {\n  const response = await fetch(`${fetchApi}test/find/${testId}`, {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Error al obtener el test');\n  }\n  return response.json();\n};\nexport const registerTest = async testData => {\n  const response = await fetch(`${fetchApi}test/registerTest`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(testData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al registrar el test');\n  }\n  return response.json();\n};\nexport const registerQuestion = async questionData => {\n  const response = await fetch(`${fetchApi}test/registerQuestion`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(questionData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al registrar la pregunta');\n  }\n  return response.json();\n};\nexport const registerAnswer = async answerData => {\n  const response = await fetch(`${fetchApi}test/registerAnswerQuestion`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(answerData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al registrar la respuesta');\n  }\n  return response.json();\n};\nexport const fetchCourses = async () => {\n  const response = await fetch(`${fetchApi}courses`, {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Error al obtener los cursos');\n  }\n  return response.json();\n};\nexport const fetchCourseById = async courseId => {\n  const response = await fetch(`${fetchApi}courses/find/${courseId}`, {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Error al obtener el curso');\n  }\n  return response.json();\n};\nexport const registerTopic = async topicData => {\n  return fetchApiWithAuth(`${fetchApi}courses/registerTopic`, {\n    method: 'POST',\n    body: JSON.stringify(topicData)\n  });\n};\nexport const fetchUsers = async () => {\n  const response = await fetch(`${fetchApi}users`, {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Error al obtener los usuarios');\n  }\n  return response.json();\n};\nexport const fetchUserById = async userId => {\n  const response = await fetch(`${fetchApi}users/find/${userId}`, {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Error al obtener el usuario');\n  }\n  return response.json();\n};","map":{"version":3,"names":["fetchApi","token","fetchApiWithAuth","url","options","response","fetch","headers","ok","Error","json","registerCourse","courseData","method","body","JSON","stringify","login","email","password","register","userData","fetchTests","fetchTestById","testId","registerTest","testData","registerQuestion","questionData","registerAnswer","answerData","fetchCourses","fetchCourseById","courseId","registerTopic","topicData","fetchUsers","fetchUserById","userId"],"sources":["/home/stuxnet/1_Final_AprendiX _AdminDash/1_admin_aprendix_1/1_admin_aprendix/src/api.js"],"sourcesContent":["const fetchApi = 'https://nodebackend-vv0e.onrender.com/api/v1/';\n\nconst token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NTRiMjMyZDRmOGMxODgxMGU3OTMyOCIsImlhdCI6MTcxODE2MTQzMSwiZXhwIjoxNzE4MjQ3ODMxfQ.7--dVUCUDbRNTJ9PmQm45HEDRuXBDcBQy0mNqeSxI0c';\n\nconst fetchApiWithAuth = async (url, options) => {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-token': token,\n      ...options.headers,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error('Error en la solicitud a la API');\n  }\n\n  return response.json();\n};\n\nexport const registerCourse = async (courseData) => {\n  return fetchApiWithAuth(`${fetchApi}courses/registerCourse`, {\n    method: 'POST',\n    body: JSON.stringify(courseData),\n  });\n};\n\nexport const login = async (email, password) => {\n  const response = await fetch(`${fetchApi}auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  });\n\n  if (!response.ok) {\n    throw new Error('Error en la solicitud de inicio de sesión');\n  }\n\n  return response.json();\n};\n\nexport const register = async (userData) => {\n  const response = await fetch(`${fetchApi}auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n\n  if (!response.ok) {\n    throw new Error('Error en la solicitud de registro');\n  }\n\n  return response.json();\n};\n\nexport const fetchTests = async () => {\n  const response = await fetch(`${fetchApi}test`, { method: 'GET' });\n\n  if (!response.ok) {\n    throw new Error('Error al obtener los tests');\n  }\n\n  return response.json();\n};\n\nexport const fetchTestById = async (testId) => {\n  const response = await fetch(`${fetchApi}test/find/${testId}`, { method: 'GET' });\n\n  if (!response.ok) {\n    throw new Error('Error al obtener el test');\n  }\n\n  return response.json();\n};\n\nexport const registerTest = async (testData) => {\n  const response = await fetch(`${fetchApi}test/registerTest`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(testData),\n  });\n\n  if (!response.ok) {\n    throw new Error('Error al registrar el test');\n  }\n\n  return response.json();\n};\n\nexport const registerQuestion = async (questionData) => {\n  const response = await fetch(`${fetchApi}test/registerQuestion`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(questionData),\n  });\n\n  if (!response.ok) {\n    throw new Error('Error al registrar la pregunta');\n  }\n\n  return response.json();\n};\n\nexport const registerAnswer = async (answerData) => {\n  const response = await fetch(`${fetchApi}test/registerAnswerQuestion`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(answerData),\n  });\n\n  if (!response.ok) {\n    throw new Error('Error al registrar la respuesta');\n  }\n\n  return response.json();\n};\n\nexport const fetchCourses = async () => {\n  const response = await fetch(`${fetchApi}courses`, { method: 'GET' });\n\n  if (!response.ok) {\n    throw new Error('Error al obtener los cursos');\n  }\n\n  return response.json();\n};\n\nexport const fetchCourseById = async (courseId) => {\n  const response = await fetch(`${fetchApi}courses/find/${courseId}`, { method: 'GET' });\n\n  if (!response.ok) {\n    throw new Error('Error al obtener el curso');\n  }\n\n  return response.json();\n};\n\nexport const registerTopic = async (topicData) => {\n  return fetchApiWithAuth(`${fetchApi}courses/registerTopic`, {\n    method: 'POST',\n    body: JSON.stringify(topicData),\n  });\n};\n\nexport const fetchUsers = async () => {\n  const response = await fetch(`${fetchApi}users`, { method: 'GET' });\n\n  if (!response.ok) {\n    throw new Error('Error al obtener los usuarios');\n  }\n\n  return response.json();\n};\n\nexport const fetchUserById = async (userId) => {\n  const response = await fetch(`${fetchApi}users/find/${userId}`, { method: 'GET' });\n\n  if (!response.ok) {\n    throw new Error('Error al obtener el usuario');\n  }\n\n  return response.json();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}